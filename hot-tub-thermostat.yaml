esphome:
  name: hot-tub-thermostat
  friendly_name: Hot Tub Thermostat

esp32:
  board: esp32dev
  framework:
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "jXT4Wi9jZDpnAjTlwkopZOfV0veFEjMsBwS0iIuskQg="

ota:
  - platform: esphome
    password: "db786ffdd6ef567bf8c2f33c169fdeee"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Hot-Tub-Thermostat"
    password: "sIrMeoCTWYyY"

captive_portal:

# Restart Button
button:
  - platform: restart
    name: "Thermostat Restart"
    id: restart_button

# Web Portal
web_server:
  port: 80

#############
## SENSORS ##
#############
one_wire:
  - platform: gpio
    pin: GPIO23

sensor:
  - platform: dallas_temp
    name: "Tub Temperature"
    id: tub_temp
    update_interval: 20s

### HOME ASSISTANT SENSORS ###
#  - platform: homeassistant
#    entity_id: sensor.entity_id
#    id: id_of_the_sensor
#    name: "Name of Sensor"

#############
## DISPLAY ##
#############
i2c:
  sda: GPIO21
  scl: GPIO22

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    reset_pin: GPIO17
    address: 0x3C
    lambda: |-
      // Current Temp in F
      float tub_temp_f = (id(tub_temp).state * 9.0 / 5.0) + 32.0;

      // Target Temp in F
      float target_temp_f = (id(tub_thermostat).target_temperature * 9.0 / 5.0) + 32.0;

      // Display
      it.printf(2, 4, id(medium_font), "%.1f", tub_temp_f);
      it.printf(20, 30, id(large_font), "%.1f", target_temp_f);
      it.printf(100, 4, id(small_font), "%s", id(thermostat_mode_text).state.c_str());
      it.printf(100, 20, id(small_font), "%s", id(pump_status_text).state.c_str());

font:
  - file: "fonts/CaviarDreams.ttf"
    id: large_font
    size: 30
  - file: "fonts/CaviarDreams.ttf"
    id: medium_font
    size: 18
  - file: "fonts/CaviarDreams.ttf"
    id: small_font
    size: 12

################
## THERMOSTAT ##
################
climate:
  - platform: thermostat
    name: "Tub Thermostat"
    id: tub_thermostat
    # icon: 'find some icon here'
    sensor: tub_temp
    # sensor: living_room_temp
    min_idle_time: 10s
    min_heating_off_time: 300s
    min_heating_run_time: 120s
    heat_action:
      - switch.turn_on: pump_relay
    idle_action:
      - switch.turn_off: pump_relay
    visual:
      min_temperature: 10
      max_temperature: 55
      temperature_step: 
        target_temperature: 0.5
        current_temperature: 0.1

##############
## SWITCHES ##
##############
switch:
  ## Relay ##
  - platform: gpio
    pin: GPIO19
    name: "Pump Relay"
    internal: True
    id: pump_relay
    restore_mode: ALWAYS_OFF

  ## Switches that correspond with the states in HA.
  ## Switches that are controlled by the physical buttons.
  ## Switches to toggle the entities' states
  ## Virtual switches on HA
  - platform: template
    name: "String Light Switch"
    id: string_light_switch
    lambda: |-
      // Synchronize the switch state with the entity state
      if (id(string_light_entity_state).state) {
        return true; // Entity is on, so the switch should be on.
      } else {
        return false; // Entity is off, so the switch should be off.
      }
    turn_on_action: 
      - homeassistant.service:
          service: light.turn_on
          data:
            entity_id: light.outdoor_shower_lights
    turn_off_action: 
      - homeassistant.service:
          service: light.turn_off
          data:
            entity_id: light.outdoor_shower_lights


####################
## Binary Sensors ##
####################
binary_sensor:
  ## Sensors to identify the phyical button state ##
  - platform: gpio
    pin:
      number: GPIO14 # String Light Switch Button Pin
      mode: INPUT_PULLUP
    name: "String Light Physical Button State"
    id: string_light_physical_button_state
    filters:
      - invert: # Invert the signal because the button will pull the pin low when pressed
    on_press:
      - switch.toggle: string_light_switch

  ## Sensors to identify the states of HA entities ##
  - platform: homeassistant
    id: string_light_entity_state
    entity_id: light.outdoor_shower_lights # Change here for a different entity
    name: "String Light State"
    internal: True

  ## Thermostat physical power button state (Mode: Heat or Off)
  - platform: gpio
    pin: 
      number: GPIO26
      mode: INPUT_PULLUP
    name: "Thermostat On Off Button"
    internal: True
    id: thermostat_button
    on_press:
      then:
        - climate.control:
            id: tub_thermostat
            mode: !lambda |-
              if (id(tub_thermostat).mode == climate::CLIMATE_MODE_OFF) {
                return climate::CLIMATE_MODE_HEAT;
              } else {
                return climate::CLIMATE_MODE_OFF;
              }
  
  - platform: template
    name: "Thermostat Status"
    id: thermostat_status
    lambda: |-
      return id(tub_thermostat).mode == climate::CLIMATE_MODE_HEAT;
    on_state:
      - output.turn_off: indicator_led
      - output.turn_off: power_button_led
      - if:
          condition:
            binary_sensor.is_on: thermostat_status
          then:
            - output.turn_on: power_button_led
            - if:
                condition:
                  binary_sensor.is_on: pump_status
                then:
                  - output.turn_on:
                      id: indicator_led
                else:
                  - output.turn_off:
                      id: indicator_led
          else:
            - output.turn_off: indicator_led
            - output.turn_off: power_button_led
            - switch.turn_off: pump_relay

  # Increase Target Temp
  - platform: gpio
    pin: 
      number: GPIO25
      mode: INPUT_PULLUP
    name: "Increase Temp Button"
    internal: True
    on_press:
      then:
        - climate.control:
            id: tub_thermostat
            target_temperature: !lambda |-
              return id(tub_thermostat).target_temperature + 0.278;

  # Decrease Target Temp
  - platform: gpio
    pin: 
      number: GPIO33
      mode: INPUT_PULLUP
    name: "Decrease Temp Button"
    internal: True
    on_press:
      then:
        - climate.control:
            id: tub_thermostat
            target_temperature: !lambda |-
              return id(tub_thermostat).target_temperature - 0.278;
  
  # Heater (Relay) On or Off
  - platform: template
    id: pump_status
    name: "Pump Status"
    lambda: |-
      return id(pump_relay).state;
    on_state:
      - output.turn_off: indicator_led
      - output.turn_off: power_button_led
      - if:
          condition:
            binary_sensor.is_on: thermostat_status
          then:
            - output.turn_on: power_button_led
            - if:
                condition:
                  binary_sensor.is_on: pump_status
                then:
                  - output.turn_on:
                      id: indicator_led
                else:
                  - output.turn_off:
                      id: indicator_led
          else:
            - output.turn_off: indicator_led
            - output.turn_off: power_button_led

  # Text sensor to Binary sensor
  - platform: template
    id: thermostat_mode_on
    internal: True
    name: "Thermostat Mode On"
    lambda: |-
      return id(thermostat_mode_text).state == "HEAT";


######
# TEXT SENSORS
######
text_sensor:
  - platform: template
    id: thermostat_mode_text
    name: "Thermostat Mode Text"
    internal: True
    update_interval: 1s
    lambda: |-
      if (id(tub_thermostat).mode == climate::CLIMATE_MODE_OFF) {
        return {"OFF"};
      } else {
        return {"HEAT"};
      }

  - platform: template
    id: pump_status_text
    name: "Pump Status Text"
    internal: True
    update_interval: 1s
    lambda: |-
      if (id(tub_thermostat).mode == climate::CLIMATE_MODE_HEAT) {
        if (id(pump_status).state) {
          return {"ON"};
        } else {
          return {"OFF"};
        }
      } else {
        return {""};
      }

##########################################
## OUTPUT (Button LEDs, Indicator LEDs) ##
##########################################
output:
  - platform: gpio
    pin: GPIO27
    id: power_button_led

  - platform: gpio
    pin: GPIO13
    id: indicator_led
